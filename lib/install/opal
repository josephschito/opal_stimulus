#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"
require "listen"
require "opal"
require "opal-browser"

GEM_NAME = "opal_stimulus"

Opal.use_gem(GEM_NAME) rescue Opal.append_path(File.expand_path("lib", Bundler.rubygems.find_name(GEM_NAME).first.full_gem_path))

Opal.append_path("app/opal")

build = -> {
  puts "ðŸ”¨ Compiling Opal..."

  builder = Opal::Builder.new

  result = builder.build("application")

  output_path = "app/assets/builds/opal.js"
  sourcemap_path = "#{output_path}.map"

  js_code = result.to_s
  source_map_json = result.source_map.to_json

  File.write(output_path, js_code + "\n//# sourceMappingURL=/assets/opal.js.map")
  File.write(sourcemap_path, source_map_json)

  puts "âœ… Compiled to #{output_path}"
}

update_opal_controllers_requires = -> {
  file_path = "app/opal/controllers_requires.rb"

  requires = Dir["app/opal/controllers/**/*.rb"].sort.map do |file|
    "require '#{file.sub("app/opal/", "").sub(".rb", "")}'"
  end

  File.open(file_path, "w") do |f|
    f.puts "# This file is automatically generated by `bin/opal`."
    f.puts "# If you want to update this file, please run: `bin/opal --update-requires`."
    f.puts
    f.puts requires.join("\n")
  end

  puts "âœ… Updated #{file_path} ðŸŽ‰"
}

if ARGV.include?("--update-requires")
  update_opal_controllers_requires.()
  exit
end

update_opal_controllers_requires.()
build.call

exit unless ARGV.include?("--watch")

listen = Listen.to("app/opal") do |modified, added, removed|
  if added.any? || removed.any?
    puts "ðŸ”„ Updating opal controllers requires..."
    update_opal_controllers_requires.()
  end

  build.call
end

puts "ðŸ‘€ Watching app/opal for changes..."
listen.start
Signal.trap("INT") { listen.stop }
sleep
